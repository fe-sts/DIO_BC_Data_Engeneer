# -*- coding: utf-8 -*-
"""FRS_modelo_titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D9R6l9-AsnjUwXbnGF5bpyYZXdrBZuU_

DataSet: Titanic

Autor: Felipe Rinaldini Santos

# Pacotes
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

"""# Lendo o banco de dados"""

dados = pd.read_csv('/content/train.csv')

dados.head()

dados = dados.drop(['Name', 'Ticket', 'Cabin', 'Embarked'], axis = 1)

dados.head()

"""# Editando chave e variável resposta"""

dados = dados.set_index('PassengerId') #Criando uma Chave com o indice
dados = dados.rename(columns = {'Survived': 'target'}, inplace = False)

dados.head()

"""# Descritiva"""

dados.describe()

dados.describe(include = ['O'])

"""# Transformação dos dados"""

dados['Sex_F'] = np.where(dados['Sex'] == 'female', 1, 0) #Transformando Dados Categoricos (SEXO) em FLAG (0 e 1)
dados['Pclass_1'] = np.where(dados['Pclass'] == 1, 1, 0) #COlocando FLAGS para as Classes
dados['Pclass_2'] = np.where(dados['Pclass'] == 2, 1, 0)
dados['Pclass_3'] = np.where(dados['Pclass'] == 3, 1, 0)

dados = dados.drop(['Pclass', 'Sex'], axis = 1)

dados.head()

dados.isnull().sum() #Verifica quais Campos possuem Missing (falta de dados)

dados.fillna(0, inplace = True) #Retira as linhas com Missing (falta de dados)

dados.isnull().sum() #Verifica se foi retirado as linhas Missing

"""# Amostragem"""

x_train, x_test, y_train, y_test = train_test_split(dados.drop(['target'], axis = 1),
                                                    dados['target'],
                                                    test_size  = 0.3,
                                                    random_state = 1234)
[{'treino': x_train.shape}, {'teste': x_test.shape}]

"""# Modelo"""

rndforest = RandomForestClassifier(n_estimators = 1000, criterion = 'gini', max_depth = 5)

rndforest.fit(x_train, y_train)

probabilidade = rndforest.predict_proba(dados.drop('target', axis = 1))[:,1]
classificacao = rndforest.predict(dados.drop('target', axis = 1))

dados['probabilidade'] = probabilidade
dados['classificacao'] = classificacao

dados